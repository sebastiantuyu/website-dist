__NUXT_JSONP__("thoughts/p/0-deployment-time", {data:[{title:"0 deployment time for apps",thumbnail:"\u003Cp\u003E This tutorial will use Nuxt.js as a frontend framework, but you can use whatever you like since the principle will be the same. To have a better understanding, check the following diagram:\u003C\u002Fp\u003E\u003Cp\u003E \u003Cimg src='https:\u002F\u002Fcdn.sebastiantuyu.com\u002Fdeployment-diagram.png' alt=''\u003E\u003C\u002Fp\u003E\u003Cp\u003E\u003C\u002Fp\u003E\u003Cp\u003E Before this deployment script, you could also have your pipeline run any competent test required to make sure your app isn't broken before releasing it to production.\u003C\u002Fp\u003E\u003Cp\u003E The bash script would look like\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccc\u003EBash\u003C\u002Fcc\u003E\u003Cp\u003E#! \u002Fusr\u002Fbin\u002Fenv bash\u003C\u002Fp\u003E\u003Cp\u003Enpm run generate \\\u003C\u002Fp\u003E\u003Cp\u003E  && cd dist \\\u003C\u002Fp\u003E\u003Cp\u003E  && aws s3 sync . s3:\u002F\u002Fbucket-name.com \\\u003C\u002Fp\u003E\u003Cp\u003E  && aws cloudfront create-invalidation \\\u003C\u002Fp\u003E\u003Cp\u003E --distribution-id 'XXX' \\\u003C\u002Fp\u003E\u003Cp\u003E --paths '\u002F*'\u003C\u002Fp\u003E\u003C\u002Fpre\u003E\u003Cp\u003E Basically, we build the app for production and then we upload the code to an s3 bucket.\u003C\u002Fp\u003E\u003Cp\u003E Considerations: \u003Cul\u003E \u003Cli\u003ES3 Bucket\u003C\u002Fli\u003E\u003Cul\u003E \u003Cli\u003EYour s3 bucket should have permissions to enable public access and allow the option 'Host Static Website'\u003C\u002Fli\u003E\u003Cimg src='https:\u002F\u002Fcdn.sebastiantuyu.com\u002Fs3-host-static-website.png' alt=''\u003E \u003C\u002Ful\u003E \u003Cli\u003ECloufront\u003C\u002Fli\u003E\u003Cul\u003E \u003Cli\u003EIdeally, you should have your domain\u003C\u002Fli\u003E\u003C\u002Ful\u003E \u003Cul\u003E \u003Cli\u003ECreate a new Distribution pointing to your s3 bucket (careful, you should use the s3 address which contains something like https:\u002F\u002F.website-...)\u003C\u002Fli\u003E\u003Cimg src='https:\u002F\u002Fcdn.sebastiantuyu.com\u002Fcdn-distribution.png' alt=''\u003E \u003C\u002Ful\u003E \u003Cul\u003E \u003Cli\u003EAlso, while creating your Cloudfront distribution you should add in 'Alternate Domain name' your desired website domain, something like 'sebastiantuyu.com'\u003C\u002Fli\u003E\u003C\u002Ful\u003E \u003Cli\u003ERoute53\u003C\u002Fli\u003E\u003Cul\u003E \u003Cli\u003EIn Route53 you should create an A record that points to an 'alias' to the CloudFront distribution (if your CF doesn't have the same domain that the A record it won't appear here!)\u003C\u002Fli\u003E\u003Cimg style='max-height:350px;margin: 0.5em auto' src='https:\u002F\u002Fcdn.sebastiantuyu.com\u002Froute53-record-a.png' alt=''\u003E \u003C\u002Ful\u003E\u003C\u002Ful\u003E\u003C\u002Fp\u003E\u003Cp\u003E Basically, that's all the AWS configuration required, I know it could be intimidating using AWS for the first time but take it easy is very unlikely that you would have charged if you carefully follow this tutorial.\u003C\u002Fp\u003E\u003Ch3\u003E What is next? \u003C\u002Fh3\u003E\u003Cp\u003E Remember to add your distribution id to your deployment script, cache invalidations are important so you can see your updates on your website. In this small repo, you can check all the code needed to set up your project.\u003C\u002Fp\u003E\u003Cp\u003E In this small repo you can check all the code needed to setup your project.\u003C\u002Fp\u003E\u003Ch3\u003E What should be my workflow?\u003C\u002Fh3\u003E\u003Cp\u003EEach time you would have to release a new version, I would recommend using \u003Cpre\u003Enpm run deploy\u003C\u002Fpre\u003E\u003C\u002Fp\u003E\u003Cp\u003E Psss: Also, it is widely recommended to update your app version, on each release depending on what are you doing (patch, minor, major)\u003C\u002Fp\u003E\u003Cp\u003E Happy hacking!\u003C\u002Fp\u003E"}],fetch:{},mutations:void 0});